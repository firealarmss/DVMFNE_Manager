<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('partials/head.ejs') %>
</head>
<body>
<script src="/public/js/fneUtils.js"></script>
<div class="container mt-4">
    <h2><%=name%> Peers</h2>
    <h4>Peer Count: <%=peers.length%></h4>
    <input type="text" id="peerIdSearch" placeholder="Filter by Peer ID" class="form-control mb-3">
    <div class="mb-3">
        <label for="sortingMethod" class="form-label">Sort by:</label>
        <select id="sortingMethod" class="form-select">
            <option value="asc">Peer ID (Ascending)</option>
            <option value="desc">Peer ID (Descending)</option>
            <option value="connState">Connection State</option>
            <option value="software">Software Type</option>
        </select>
        <button id="sortButton" class="btn btn-primary mt-2">Sort</button>
    </div>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Connected</th>
            <th>Connection State</th>
            <th>Peer ID</th>
            <th>Identity</th>
            <th>Address</th>
            <th>Rx Frequency</th>
            <th>Tx Frequency</th>
            <th>Software</th>
        </tr>
        </thead>
        <tbody>
        <%  peers.forEach(peer => {
            let trClass = '';

            if (!peer){
                console.warn(`Skipped null peer: ${peer.peerId}`);
                return;
            }

            if (peer.connectionState.toString() !== '4') {
                trClass = 'table-warning';
            }
        %>
            <tr class="<%= trClass %>">
                <td><%= peer.connected ? 'Yes' : 'No' %></td>
                <td data-connState="<%= peer.connectionState %>"></td>
                <td><%= peer.peerId %></td>
                <td><%= peer.config.identity %></td>
                <td><%= peer.address %></td>
                <td data-frequency="<%= peer.config.rxFrequency %>"></td>
                <td data-frequency="<%= peer.config.txFrequency %>"></td>
                <td><%= peer.config.software %></td>
            </tr>
        <% }) %>
        </tbody>
    </table>
</div>
<script src="/socket.io/socket.io.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const searchInput = document.getElementById('peerIdSearch');
        const tableBody = document.querySelector('tbody');
        const tableRows = document.querySelectorAll('tbody tr');

        const socket = io();

        socket.on('peerListUpdate', (updatedPeers) => {
            console.log('Peer list update received:', updatedPeers);
            if (!Array.isArray(updatedPeers)) return;

            tableBody.innerHTML = '';

            updatedPeers.forEach(updatedPeer => {
                const existingRow = Array.from(tableRows).find(row => row.querySelector('td:nth-child(3)').textContent === updatedPeer.peerId.toString());
                if (existingRow) {
                    updateRow(existingRow, updatedPeer);
                } else {
                    const newRow = createRowForPeer(updatedPeer);
                    tableBody.appendChild(newRow);
                }
            });

            sortTable(document.getElementById('sortingMethod').value);
        });

        searchInput.addEventListener('input', () => {
            const searchValue = searchInput.value.toLowerCase();

            tableRows.forEach(row => {
                const peerIdCell = row.querySelector('td:nth-child(3)');
                if (peerIdCell) {
                    const peerId = peerIdCell.textContent.toLowerCase();
                    if (peerId.includes(searchValue)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                }
            });
        });

        function updateRow(row, peer) {
            const connectionStateText = netConnectionStatus[peer.connectionState] || peer.connectionState;
            const rxFrequencyText = peer.config && peer.config.rxFrequency ? formatFrequency(peer.config.rxFrequency) : 'N/A';
            const txFrequencyText = peer.config && peer.config.txFrequency ? formatFrequency(peer.config.txFrequency) : 'N/A';

            row.className = peer.connectionState.toString() !== '4' ? 'table-warning' : '';
            row.cells[0].textContent = peer.connected ? 'Yes' : 'No';
            row.cells[1].textContent = connectionStateText;
            row.cells[4].textContent = peer.address;
            row.cells[5].textContent = rxFrequencyText;
            row.cells[6].textContent = txFrequencyText;
            row.cells[7].textContent = peer.config.software;
        }


        function createRowForPeer(peer) {
            const trClass = peer.connectionState && peer.connectionState.toString() !== '4' ? 'table-warning' : '';
            const connected = peer.connected ? 'Yes' : 'No';
            const peerId = peer.peerId || 'N/A';
            const identity = peer.config && peer.config.identity ? peer.config.identity : 'N/A';
            const address = peer.address || 'N/A';
            const connectionState = netConnectionStatus[peer.connectionState] || 'N/A';
            const rxFrequency = peer.config && peer.config.rxFrequency ? formatFrequency(peer.config.rxFrequency) : 'N/A';
            const txFrequency = peer.config && peer.config.txFrequency ? formatFrequency(peer.config.txFrequency) : 'N/A';
            const software = peer.config && peer.config.software ? peer.config.software : 'N/A';

            const row = document.createElement('tr');
            row.className = trClass;
            row.innerHTML = `
        <td>${connected}</td>
        <td>${connectionState}</td>
        <td>${peerId}</td>
        <td>${identity}</td>
        <td>${address}</td>
        <td>${rxFrequency}</td>
        <td>${txFrequency}</td>
        <td>${software}</td>
    `;
            return row;
        }



        const sortingMethodSelect = document.getElementById('sortingMethod');
        const sortButton = document.getElementById('sortButton');

        sortButton.addEventListener('click', () => {
            sortTable(sortingMethodSelect.value);
        });

        function sortTable(sortMethod) {
            const rowsArray = Array.from(tableRows);

            rowsArray.sort((rowA, rowB) => {
                const idA = parseInt(rowA.cells[2].textContent);
                const idB = parseInt(rowB.cells[2].textContent);
                const connStateA = rowA.cells[1].getAttribute('data-connState');
                const connStateB = rowB.cells[1].getAttribute('data-connState');
                const softwareA = rowA.cells[7].textContent.trim().toLowerCase();
                const softwareB = rowB.cells[7].textContent.trim().toLowerCase();

                switch (sortMethod) {
                    case 'asc':
                        return idA - idB;
                    case 'desc':
                        return idB - idA;
                    case 'connState':
                        if (connStateA < connStateB) return -1;
                        if (connStateA > connStateB) return 1;
                        return 0;
                    case 'software':
                        if (softwareA < softwareB) return -1;
                        if (softwareA > softwareB) return 1;
                        return 0;
                }
            });

            rowsArray.forEach(row => tableBody.appendChild(row));
        }

        sortTable('asc');
    });
</script>
</body>
</html>